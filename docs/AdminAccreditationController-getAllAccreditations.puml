@startuml
skinparam dpi 300
skinparam maxMessageSize 160

actor Client
participant "AdminRoleInterceptor" as Interceptor
participant "JwtUtils" as JwtUtil
participant "AdminAccreditationController" as Controller
participant "AccreditationService" as Service
participant "AccreditationRepository" as Repository
participant "Redis Cache" as Cache
database Database

Client -> Interceptor : GET /api/accreditation/admin/all\nwith JWT Token
activate Interceptor

Interceptor -> JwtUtil : hasRole(token, "ADMIN")
activate JwtUtil
JwtUtil --> Interceptor : isAdmin: boolean
deactivate JwtUtil

alt isNotAdmin
    Interceptor --> Client : throw UnauthorizedException/ForbiddenException
else isAdmin
    Interceptor -> Controller : getAllAccreditations()
    deactivate Interceptor
    activate Controller

    Controller -> Service : allAccreditations()
    activate Service

    Service -> Cache : get("accreditations")
    activate Cache

    alt #lightblue Cache Hit
        Cache --> Service : List<AccreditationDtoOutput>
    else Cache Miss
        Cache --> Service : null
        deactivate Cache

        Service -> Repository : findAll()
        activate Repository

        Repository -> Database : SELECT * FROM accreditations
        activate Database
        Database --> Repository : List<AccreditationEntity>
        deactivate Database

        Repository --> Service : List<AccreditationEntity>
        deactivate Repository

        Service -> Service : mapToDto(entities)

        Service -> Cache : put("accreditations", dtoList)
        activate Cache
        Cache --> Service : void
        deactivate Cache
    end

    Service --> Controller : ArrayList<AccreditationDtoOutput>
    deactivate Service

    Controller --> Client : ApiResponse<ArrayList<AccreditationDtoOutput>>
    deactivate Controller
end

@enduml